/*! For license information please see dd8b883f.b986985d.js.LICENSE.txt */
"use strict";(self.webpackChunkbackstage_microsite=self.webpackChunkbackstage_microsite||[]).push([[879333],{459988:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var i=t(785893),o=t(511151);const s={id:"05-frontend-authorization",title:"5. Frontend Components with Authorization",description:"Placing frontend components behind authorization"},r=void 0,a={id:"permissions/plugin-authors/05-frontend-authorization",title:"5. Frontend Components with Authorization",description:"Placing frontend components behind authorization",source:"@site/../docs/permissions/plugin-authors/05-frontend-authorization.md",sourceDirName:"permissions/plugin-authors",slug:"/permissions/plugin-authors/05-frontend-authorization",permalink:"/docs/permissions/plugin-authors/05-frontend-authorization",draft:!1,unlisted:!1,editUrl:"https://github.com/backstage/backstage/edit/master/docs/../docs/permissions/plugin-authors/05-frontend-authorization.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"05-frontend-authorization",title:"5. Frontend Components with Authorization",description:"Placing frontend components behind authorization"},sidebar:"docs",previous:{title:"4. Authorizing access to paginated data",permalink:"/docs/permissions/plugin-authors/04-authorizing-access-to-paginated-data"},next:{title:"Overview",permalink:"/docs/tooling/cli/overview"}},d={},l=[{value:"Using <code>usePermission</code>",id:"using-usepermission",level:2},{value:"Using <code>RequirePermission</code>",id:"using-requirepermission",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["In the previous sections, we learned how to protect our plugin's backend API routes with the permission framework. Most routes that return some data to be displayed (such as our ",(0,i.jsx)(n.code,{children:"GET /todos"})," route) need no additional changes on the frontend, as the backend will simply return an empty list or a ",(0,i.jsx)(n.code,{children:"404"}),". However, for UI elements that trigger a mutative action, it's common practice to hide or disable them when a user doesn't have permission."]}),"\n",(0,i.jsxs)(n.p,{children:['Take, for example, the "Add" button in our todo list application. When a user clicks this button, the frontend makes a ',(0,i.jsx)(n.code,{children:"POST"})," request to the ",(0,i.jsx)(n.code,{children:"/todos"})," route of our backend. If a user tries to add a todo but is not authorized, they will have no way of knowing this until they perform the action and are faced with an error. This is a poor user experience. We can do better by disabling the add button."]}),"\n",(0,i.jsx)(n.admonition,{title:"Note",type:"note",children:(0,i.jsxs)(n.p,{children:["Placing frontend components behind authorization cannot take the place of placing your backend routes behind authorization. Authorization checks on the frontend should be used in ",(0,i.jsx)(n.em,{children:"addition"})," to the corresponding backend authorization, as an improvement to the user experience. If you do not place your backend route behind authorization, a malicious actor can still send a request to the route even if you disabled the corresponding frontend component."]})}),"\n",(0,i.jsxs)(n.h2,{id:"using-usepermission",children:["Using ",(0,i.jsx)(n.code,{children:"usePermission"})]}),"\n",(0,i.jsx)(n.p,{children:"Let's start by adding the packages we will need:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ yarn workspace @internal/plugin-todo-list \\\n  add @backstage/plugin-permission-react @internal/plugin-todo-list-common\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Let's make the following changes in ",(0,i.jsx)(n.code,{children:"plugins/todo-list/src/components/TodoListPage/TodoListPage.tsx"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:'title="plugins/todo-list/src/components/TodoListPage/TodoListPage.tsx"',children:'import {\n  alertApiRef,\n  discoveryApiRef,\n  fetchApiRef,\n  useApi,\n} from \'@backstage/core-plugin-api\';\n/* highlight-add-start */\nimport { usePermission } from \'@backstage/plugin-permission-react\';\nimport { todoListCreatePermission } from \'@internal/plugin-todo-list-common\';\n/* highlight-add-end */\n\nfunction AddTodo({ onAdd }: { onAdd: (title: string) => any }) {\n  const title = useRef(\'\');\n  /* highlight-add-next-line */\n  const { loading: loadingPermission, allowed: canAddTodo } = usePermission({\n    permission: todoListCreatePermission,\n  });\n\n  return (\n    <>\n      <Typography variant="body1">Add todo</Typography>\n      <Box\n        component="span"\n        alignItems="flex-end"\n        display="flex"\n        flexDirection="row"\n      >\n        <TextField\n          placeholder="Write something here..."\n          onChange={e => (title.current = e.target.value)}\n        />\n        {/* highlight-remove-start */}\n        <Button variant="contained" onClick={handleAdd}>\n          Add\n        </Button>\n        {/* highlight-remove-end */}\n        {/* highlight-add-start */}\n        {!loadingPermission && (\n          <Button\n            disabled={!canAddTodo}\n            variant="contained"\n            onClick={() => onAdd(title.current)}\n          >\n            Add\n          </Button>\n        )}\n        {/* highlight-add-end */}\n      </Box>\n    </>\n  );\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Here we are using the ",(0,i.jsxs)(n.a,{href:"https://backstage.io/docs/reference/plugin-permission-react.usepermission",children:[(0,i.jsx)(n.code,{children:"usePermission"})," hook"]})," to communicate with the permission policy and receive a decision on whether this user is authorized to create a todo list item."]}),"\n",(0,i.jsx)(n.p,{children:"It's really that simple! Let's change our policy to test the disabled button:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="packages/backend/src/plugins/permission.ts"',children:"if (isPermission(request.permission, todoListCreatePermission)) {\n  return {\n    /* highlight-remove-next-line */\n    result: AuthorizeResult.ALLOW,\n    /* highlight-add-next-line */\n    result: AuthorizeResult.DENY,\n  };\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"And now you should see that you are not able to create a todo item from the frontend!"}),"\n",(0,i.jsxs)(n.h2,{id:"using-requirepermission",children:["Using ",(0,i.jsx)(n.code,{children:"RequirePermission"})]}),"\n",(0,i.jsxs)(n.p,{children:["Providing a disabled state can be a helpful signal to users, but there may be cases where hiding the element is preferred. For such cases, you can use the provided ",(0,i.jsxs)(n.a,{href:"https://backstage.io/docs/reference/plugin-permission-react.requirepermission",children:[(0,i.jsx)(n.code,{children:"RequirePermission"})," component"]}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:'title="plugins/todo-list/src/components/TodoListPage/TodoListPage.tsx"',children:'import {\n  alertApiRef,\n  discoveryApiRef,\n  fetchApiRef,\n  useApi,\n} from \'@backstage/core-plugin-api\';\n/* highlight-remove-next-line */\nimport { usePermission } from \'@backstage/plugin-permission-react\';\n/* highlight-add-next-line */\nimport { RequirePermission } from \'@backstage/plugin-permission-react\';\nimport { todoListCreatePermission } from \'@internal/plugin-todo-list-common\';\n\nexport const TodoListPage = () => {\n  // ..\n  <Grid container spacing={3} direction="column">\n    {/* highlight-remove-start */}\n    <Grid item>\n      <AddTodo onAdd={handleAdd} />\n    </Grid>\n    {/* highlight-remove-end */}\n    {/* highlight-add-start */}\n    <RequirePermission permission={todoListCreatePermission} errorPage={<></>}>\n      <Grid item>\n        <AddTodo onAdd={handleAdd} />\n      </Grid>\n    </RequirePermission>\n    {/* highlight-add-end */}\n    <Grid item>\n      <TodoList key={key} onEdit={setEdit} />\n    </Grid>\n  </Grid>;\n};\n\nfunction AddTodo({ onAdd }: { onAdd: (title: string) => any }) {\n  const title = useRef(\'\');\n  /* highlight-remove-next-line */\n  const { loading: loadingPermission, allowed: canAddTodo } = usePermission({\n    permission: todoListCreatePermission,\n  });\n\n  return (\n    <>\n      <Typography variant="body1">Add todo</Typography>\n      <Box\n        component="span"\n        alignItems="flex-end"\n        display="flex"\n        flexDirection="row"\n      >\n        <TextField\n          placeholder="Write something here..."\n          onChange={e => (title.current = e.target.value)}\n        />\n        {/* highlight-remove-start */}\n        {!loadingPermission && (\n          <Button\n            disabled={!canAddTodo}\n            variant="contained"\n            onClick={() => onAdd(title.current)}\n          >\n            Add\n          </Button>\n        )}\n        {/* highlight-remove-end */}\n        {/* highlight-add-start */}\n        <Button variant="contained" onClick={() => onAdd(title.current)}>\n          Add\n        </Button>\n        {/* highlight-add-end */}\n      </Box>\n    </>\n  );\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Now you should find that the component for adding a todo list item does not render at all. Success!"}),"\n",(0,i.jsxs)(n.p,{children:["You can also use ",(0,i.jsx)(n.code,{children:"RequirePermission"})," to prevent access to routes as well. Here's how that would look in your ",(0,i.jsx)(n.code,{children:"packages/app/src/App.tsx"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:'title="packages/app/src/App.tsx"',children:'/* highlight-add-start */\nimport { RequirePermission } from \'@backstage/plugin-permission-react\';\nimport { todoListCreatePermission } from \'@internal/plugin-todo-list-common\';\n/* highlight-add-end */\n\nconst routes = (\n  <FlatRoutes>\n    <Route path="/search" element={<SearchPage />}>\n      {searchPage}\n    </Route>\n    <Route path="/settings" element={<UserSettingsPage />} />\n    {/* highlight-add-next-line */}\n    <Route path="/todo-list" element={\n      {/* You might want to create a "read" permission for this, we are just using this one as an example */}\n      {/* highlight-add-start */}\n      <RequirePermission permission={todoListCreatePermission}>\n        <TodoListPage />\n      </RequirePermission>\n      {/* highlight-add-end */}\n    }>\n      {/* ... */}\n    </Route>\n  </FlatRoutes>\n);\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Now if you try to navigate to ",(0,i.jsx)(n.code,{children:"https://localhost:3000/todo-list"})," you'll get and error page if you do not have permission."]})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},675251:(e,n,t)=>{var i=t(667294),o=Symbol.for("react.element"),s=Symbol.for("react.fragment"),r=Object.prototype.hasOwnProperty,a=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,d={key:!0,ref:!0,__self:!0,__source:!0};function l(e,n,t){var i,s={},l=null,c=null;for(i in void 0!==t&&(l=""+t),void 0!==n.key&&(l=""+n.key),void 0!==n.ref&&(c=n.ref),n)r.call(n,i)&&!d.hasOwnProperty(i)&&(s[i]=n[i]);if(e&&e.defaultProps)for(i in n=e.defaultProps)void 0===s[i]&&(s[i]=n[i]);return{$$typeof:o,type:e,key:l,ref:c,props:s,_owner:a.current}}n.Fragment=s,n.jsx=l,n.jsxs=l},785893:(e,n,t)=>{e.exports=t(675251)},511151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>r});var i=t(667294);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);