/*! For license information please see 2642704d.53324b80.js.LICENSE.txt */
"use strict";(self.webpackChunkbackstage_microsite=self.webpackChunkbackstage_microsite||[]).push([[564197],{39101:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>d,toc:()=>a});var n=r(785893),i=r(511151);const s={id:"test-utils.testapiprovider",title:"TestApiProvider",description:"API reference for TestApiProvider"},o=void 0,d={id:"reference/test-utils.testapiprovider",title:"TestApiProvider",description:"API reference for TestApiProvider",source:"@site/../docs/reference/test-utils.testapiprovider.md",sourceDirName:"reference",slug:"/reference/test-utils.testapiprovider",permalink:"/docs/reference/test-utils.testapiprovider",draft:!1,unlisted:!1,editUrl:"https://github.com/backstage/backstage/edit/master/docs/../docs/reference/test-utils.testapiprovider.md",tags:[],version:"current",frontMatter:{id:"test-utils.testapiprovider",title:"TestApiProvider",description:"API reference for TestApiProvider"}},c={},a=[{value:"Remarks",id:"remarks",level:2}];function p(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"/docs/reference/",children:"Home"})," > ",(0,n.jsx)(t.a,{href:"/docs/reference/test-utils",children:(0,n.jsx)(t.code,{children:"@backstage/test-utils"})})," > ",(0,n.jsx)(t.a,{href:"/docs/reference/test-utils.testapiprovider",children:(0,n.jsx)(t.code,{children:"TestApiProvider"})})]}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"TestApiProvider"})," is a Utility API context provider that is particularly well suited for development and test environments such as unit tests, storybooks, and isolated plugin development setups."]}),"\n",(0,n.jsx)(t.p,{children:"It lets you provide any number of API implementations, without necessarily having to fully implement each of the APIs."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Signature:"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"TestApiProvider: <T extends any[]>(props: TestApiProviderProps<T>) => React.JSX.Element\n"})}),"\n",(0,n.jsx)(t.h2,{id:"remarks",children:"Remarks"}),"\n",(0,n.jsx)(t.p,{children:"todo: remove this remark tag and ship in the api-reference. There's some odd formatting going on when this is made into a markdown doc, that there's no line break between the emitted "}),(0,n.jsx)(t.p,{children:" for To the following "})," so what happens is that when parsing in docusaurus, it thinks that the code block is mdx rather than a code snippet. Just omitting this from the report for now until we can work out how to fix later. A migration from ",(0,n.jsx)(t.code,{children:"ApiRegistry"})," and ",(0,n.jsx)(t.code,{children:"ApiProvider"})," might look like this, from:",(0,n.jsx)(t.p,{}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"renderInTestApp(\n  <ApiProvider\n    apis={ApiRegistry.from([\n      [identityApiRef, mockIdentityApi as unknown as IdentityApi]\n    ])}\n  >\n   ...\n  </ApiProvider>\n)\n"})}),"\n",(0,n.jsx)(t.p,{children:"To the following:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"renderInTestApp(\n  <TestApiProvider apis={[[identityApiRef, mockIdentityApi]]}>\n    ...\n  </TestApiProvider>\n)\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Note that the cast to ",(0,n.jsx)(t.code,{children:"IdentityApi"})," is no longer needed as long as the mock API implements a subset of the ",(0,n.jsx)(t.code,{children:"IdentityApi"}),"."]})]})}function l(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},675251:(e,t,r)=>{var n=r(667294),i=Symbol.for("react.element"),s=Symbol.for("react.fragment"),o=Object.prototype.hasOwnProperty,d=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,c={key:!0,ref:!0,__self:!0,__source:!0};function a(e,t,r){var n,s={},a=null,p=null;for(n in void 0!==r&&(a=""+r),void 0!==t.key&&(a=""+t.key),void 0!==t.ref&&(p=t.ref),t)o.call(t,n)&&!c.hasOwnProperty(n)&&(s[n]=t[n]);if(e&&e.defaultProps)for(n in t=e.defaultProps)void 0===s[n]&&(s[n]=t[n]);return{$$typeof:i,type:e,key:a,ref:p,props:s,_owner:d.current}}t.Fragment=s,t.jsx=a,t.jsxs=a},785893:(e,t,r)=>{e.exports=r(675251)},511151:(e,t,r)=>{r.d(t,{Z:()=>d,a:()=>o});var n=r(667294);const i={},s=n.createContext(i);function o(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);