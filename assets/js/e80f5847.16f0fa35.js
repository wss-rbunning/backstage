/*! For license information please see e80f5847.16f0fa35.js.LICENSE.txt */
"use strict";(self.webpackChunkbackstage_microsite=self.webpackChunkbackstage_microsite||[]).push([[293803],{164272:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var s=t(785893),a=t(511151);const r={id:"service-to-service-auth--old",title:"Service to Service Auth",description:"This section describes how to use service to service authentication, both internally within Backstage plugins and towards external services."},o=void 0,i={id:"auth/service-to-service-auth--old",title:"Service to Service Auth",description:"This section describes how to use service to service authentication, both internally within Backstage plugins and towards external services.",source:"@site/../docs/auth/service-to-service-auth--old.md",sourceDirName:"auth",slug:"/auth/service-to-service-auth--old",permalink:"/docs/auth/service-to-service-auth--old",draft:!1,unlisted:!1,editUrl:"https://github.com/backstage/backstage/edit/master/docs/../docs/auth/service-to-service-auth--old.md",tags:[],version:"current",frontMatter:{id:"service-to-service-auth--old",title:"Service to Service Auth",description:"This section describes how to use service to service authentication, both internally within Backstage plugins and towards external services."}},c={},l=[{value:"Setup",id:"setup",level:2},{value:"Usage in Backend Plugins",id:"usage-in-backend-plugins",level:2},{value:"Usage in External Callers",id:"usage-in-external-callers",level:2},{value:"Granular Access Control",id:"granular-access-control",level:2}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["This documentation is written for the old backend which has been replaced by\n",(0,s.jsx)(n.a,{href:"/docs/backend-system/",children:"the new backend system"}),", being the default since\nBackstage ",(0,s.jsx)(n.a,{href:"/docs/releases/v1.24.0",children:"version 1.24"}),". If have migrated to the new\nbackend system, you may want to read ",(0,s.jsx)(n.a,{href:"/docs/auth/identity-resolver",children:"its own article"}),"\ninstead. Otherwise, ",(0,s.jsx)(n.a,{href:"/docs/backend-system/building-backends/migrating",children:"consider migrating"}),"!"]})}),"\n",(0,s.jsxs)(n.p,{children:["This article describes the steps needed to introduce ",(0,s.jsx)(n.em,{children:"service-to-service auth"})," (formerly ",(0,s.jsx)(n.em,{children:"backend-to-backend"})," auth).\nThis allows plugin backends to determine whether a given request originates from\na legitimate Backstage plugin (or other external caller), by requiring a special\ntype of service-to-service token which is signed with a shared secret."]}),"\n",(0,s.jsx)(n.p,{children:"When enabling this protection on your Backstage backend plugins, for example the\ncatalog, other callers in the ecosystem such as the search indexer and\nscaffolder would need to present a valid token to the catalog to be able to\nrequest its contents."}),"\n",(0,s.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,s.jsxs)(n.p,{children:["In a newly created Backstage app, the backend is setup up to not require any\nauth at all. This means that generated service-to-service tokens are empty, and\nthat incoming requests are not validated. If you want to enable\nservice-to-service auth, the first step is to switch out the following line in\nyour backend setup at ",(0,s.jsx)(n.code,{children:"packages/backend/src/index.ts"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="packages/backend/src/index.ts"',children:"/* highlight-remove-next-line */\nconst tokenManager = ServerTokenManager.noop();\n/* highlight-add-next-line */\nconst tokenManager = ServerTokenManager.fromConfig(config, { logger: root });\n"})}),"\n",(0,s.jsxs)(n.p,{children:["By switching from the no-op ",(0,s.jsx)(n.code,{children:"ServiceTokenManager"})," to one created from config,\nyou enable service-to-service auth for any plugin that implements it. The local\ndevelopment setup will generally not be impacted by this, as temporary keys are\ngenerated under the hood. But for the production setup, this means you must now\nprovide a shared secret that enables your backend plugins to communicate with\neach other."]}),"\n",(0,s.jsx)(n.p,{children:"Backstage service-to-service tokens are currently always signed with a single\nsecret key. It needs to be shared across all backend plugins and services that\nones wishes to communicate across. The key can be any base64 encoded secret.\nThe following command can be used to generate such a key in a terminal:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'node -p \'require("crypto").randomBytes(24).toString("base64")\'\n'})}),"\n",(0,s.jsx)(n.p,{children:"Then place it in the backend configuration, either as a direct value or\ninjected as an env variable."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# commonly in your app-config.production.yaml\nbackend:\n  auth:\n    keys:\n      - secret: <the string returned by the above crypto command>\n    # - secret: ${BACKEND_SECRET} - if you want to use an env variable instead\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"NOTE"}),": For ease of development, we auto-generate a key for you if you haven't\nconfigured a secret in dev mode. You ",(0,s.jsx)(n.em,{children:"must set your own secret"})," in order for\nservice-to-service auth to work in production; the ",(0,s.jsx)(n.code,{children:"ServiceTokenManager"})," will\nthrow an exception in production if it has no keys to work with, which will lead\nto the backend failing to start up."]}),"\n",(0,s.jsx)(n.h2,{id:"usage-in-backend-plugins",children:"Usage in Backend Plugins"}),"\n",(0,s.jsxs)(n.p,{children:["There are a few steps if you want to make use of the service-to-service auth in\nyour own backend plugin. First you need to add the ",(0,s.jsx)(n.code,{children:"TokenManager"})," dependency to\nthe ",(0,s.jsx)(n.code,{children:"createRouter"})," options. Typically as ",(0,s.jsx)(n.code,{children:"tokenManager: TokenManager"}),". Along\nwith this you'll need to ask users to start providing this new dependency in\ntheir backend setup code."]}),"\n",(0,s.jsxs)(n.p,{children:["Once the ",(0,s.jsx)(n.code,{children:"TokenManager"})," is available, you use the ",(0,s.jsx)(n.code,{children:".getToken()"})," method to generate\na new token for any outgoing requests towards other Backstage backend plugins.\nThis method should be called for every request that you make; do not store the\ntoken for later use. The ",(0,s.jsx)(n.code,{children:"TokenManager"})," implementations should already cache\ntokens as needed. The returned token should then be added as a ",(0,s.jsx)(n.code,{children:"Bearer"})," token\nfor the upstream request, for example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const { token } = await this.tokenManager.getToken();\n\nconst response = await fetch(pluginBackendApiUrl, {\n  method: 'GET',\n  headers: {\n    ...headers,\n    Authorization: `Bearer ${token}`,\n  },\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["To authenticate an incoming request you use the ",(0,s.jsx)(n.code,{children:".authenticate(token)"})," method.\nAt the time of writing this method doesn't return anything, it will simply\nthrow if the token is invalid."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"await tokenManager.authenticate(token); // throws if token is invalid\n"})}),"\n",(0,s.jsx)(n.h2,{id:"usage-in-external-callers",children:"Usage in External Callers"}),"\n",(0,s.jsx)(n.p,{children:"If you have enabled server-to-server auth, you may be interested in generating\ntokens in code that is external to Backstage itself. External callers may even\nbe written in other languages than Node.js. This section explains how to generate\na valid token yourself."}),"\n",(0,s.jsxs)(n.p,{children:["The token must be a JWT with a ",(0,s.jsx)(n.code,{children:"HS256"})," signature, using the raw base64 decoded\nvalue of the configured key as the secret. It must also have the following payload:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"sub"}),': "backstage-server" (only this value supported currently)']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"exp"}),": one hour from the time it was generated, in epoch seconds"]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["NOTE: The JWT must encode the ",(0,s.jsx)(n.code,{children:"alg"})," header as a protected header, such as with\n",(0,s.jsx)(n.a,{href:"https://github.com/panva/jose/blob/main/docs/classes/jwt_sign.SignJWT.md#setprotectedheader",children:"setProtectedHeader"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"granular-access-control",children:"Granular Access Control"}),"\n",(0,s.jsx)(n.p,{children:"We plan to build out the service-to-service auth to be much more powerful in the\nfuture, but before that is done there are a few tricks you can use with the\ncurrent system to harden your deployments. This section assumes that you have\nalready split your backend plugins into more than one backend deployment, in\norder to scale or isolate them."}),"\n",(0,s.jsx)(n.p,{children:"The backend auth configuration has support for providing multiple keys, for\nexample:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"backend:\n  auth:\n    keys:\n      - secret: my-secret-key-1\n      - secret: my-secret-key-2\n      - secret: my-secret-key-3\n"})}),"\n",(0,s.jsx)(n.p,{children:"The first key will be used for signing requests, while all of the keys will be\nused for validation. This means that you can set up an asymmetric configuration\nwhere some backend deployments do not have access to each other."}),"\n",(0,s.jsx)(n.p,{children:"For example, consider the case where we have split up the catalog, scaffolder,\nand search plugin into three separate backend deployments. We can use the\nfollowing configurations to allow both the scaffolder and search plugin to speak\nto the\ncatalog, but not the other way around, and to not allow any communication between\nthe scaffolder and search plugins."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# catalog config\nbackend:\n  auth:\n    keys:\n      - secret: my-secret-key-catalog\n      - secret: my-secret-key-scaffolder\n      - secret: my-secret-key-search\n\n# scaffolder config\nbackend:\n  auth:\n    keys:\n      - secret: my-secret-key-scaffolder\n\n# search config\nbackend:\n  auth:\n    keys:\n      - secret: my-secret-key-search\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},675251:(e,n,t)=>{var s=t(667294),a=Symbol.for("react.element"),r=Symbol.for("react.fragment"),o=Object.prototype.hasOwnProperty,i=s.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,c={key:!0,ref:!0,__self:!0,__source:!0};function l(e,n,t){var s,r={},l=null,d=null;for(s in void 0!==t&&(l=""+t),void 0!==n.key&&(l=""+n.key),void 0!==n.ref&&(d=n.ref),n)o.call(n,s)&&!c.hasOwnProperty(s)&&(r[s]=n[s]);if(e&&e.defaultProps)for(s in n=e.defaultProps)void 0===r[s]&&(r[s]=n[s]);return{$$typeof:a,type:e,key:l,ref:d,props:r,_owner:i.current}}n.Fragment=r,n.jsx=l,n.jsxs=l},785893:(e,n,t)=>{e.exports=t(675251)},511151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>o});var s=t(667294);const a={},r=s.createContext(a);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);