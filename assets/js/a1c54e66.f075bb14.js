/*! For license information please see a1c54e66.f075bb14.js.LICENSE.txt */
"use strict";(self.webpackChunkbackstage_microsite=self.webpackChunkbackstage_microsite||[]).push([[969398],{701835:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var n=s(785893),a=s(511151);const o={id:"well-known-statuses",title:"Well-known Status fields of Catalog Entities",sidebar_label:"Well-known Statuses",description:"Lists a number of well known entity statuses, that have defined semantics. They can be attached to catalog entities and consumed by plugins as needed."},i=void 0,r={id:"features/software-catalog/well-known-statuses",title:"Well-known Status fields of Catalog Entities",description:"Lists a number of well known entity statuses, that have defined semantics. They can be attached to catalog entities and consumed by plugins as needed.",source:"@site/../docs/features/software-catalog/well-known-statuses.md",sourceDirName:"features/software-catalog",slug:"/features/software-catalog/well-known-statuses",permalink:"/docs/features/software-catalog/well-known-statuses",draft:!1,unlisted:!1,editUrl:"https://github.com/backstage/backstage/edit/master/docs/../docs/features/software-catalog/well-known-statuses.md",tags:[],version:"current",frontMatter:{id:"well-known-statuses",title:"Well-known Status fields of Catalog Entities",sidebar_label:"Well-known Statuses",description:"Lists a number of well known entity statuses, that have defined semantics. They can be attached to catalog entities and consumed by plugins as needed."},sidebar:"docs",previous:{title:"Well-known Relations",permalink:"/docs/features/software-catalog/well-known-relations"},next:{title:"Extending the model",permalink:"/docs/features/software-catalog/extending-the-model"}},l={},c=[{value:"Common Fields",id:"common-fields",level:2},{value:"Status Item Types",id:"status-item-types",level:2},{value:"<code>backstage.io/catalog-processing</code>",id:"backstageiocatalog-processing",level:3}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["This section lists well known\n",(0,n.jsx)(t.a,{href:"/docs/features/software-catalog/descriptor-format#common-to-all-kinds-status",children:"entity statuses"}),", that have\ndefined semantics. They can be attached to catalog entities and consumed by\nplugins as needed."]}),"\n",(0,n.jsxs)(t.p,{children:["If you are looking to extend the statuses, see\n",(0,n.jsx)(t.a,{href:"/docs/features/software-catalog/extending-the-model",children:"Extending the model"}),"."]}),"\n",(0,n.jsx)(t.h2,{id:"common-fields",children:"Common Fields"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"status"})," object of an entity is currently left unrestricted, except for the\n",(0,n.jsx)(t.code,{children:"items"})," field. Its structure is defined in the\n",(0,n.jsx)(t.a,{href:"/docs/features/software-catalog/descriptor-format#common-to-all-kinds-status",children:"descriptor format"})," section."]}),"\n",(0,n.jsx)(t.p,{children:"We reserve the right to extend this model in the future. This status is in\nactive development and its format will change unexpectedly. Do not consume it in\nyour own code until such a time that this documentation has been updated."}),"\n",(0,n.jsx)(t.h2,{id:"status-item-types",children:"Status Item Types"}),"\n",(0,n.jsxs)(t.p,{children:["This is a (non-exhaustive) list of ",(0,n.jsx)(t.code,{children:"status.items.[].type"})," values that are known\nto be in active use."]}),"\n",(0,n.jsx)(t.h3,{id:"backstageiocatalog-processing",children:(0,n.jsx)(t.code,{children:"backstage.io/catalog-processing"})}),"\n",(0,n.jsx)(t.p,{children:"Expresses an aspect of the current status of the catalog's ingestion of this\nentity. Errors that may appear here include inability to read from the remote\nSCM provider, syntax errors in the YAML file, and similar."}),"\n",(0,n.jsx)(t.p,{children:"Note that the entity data itself may be of an older version, when errors are\npresent. The ingestion system keeps the old valid entity data untouched when\npossible, so the errors described in this state may not seem to align with the\nrest of the entity, because they pertain to a remote that could not be\nsuccessfully ingested. This is normal."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:"# Example:\nstatus:\n  items:\n    - type: backstage.io/catalog-processing\n      level: error\n      message: 'NotFoundError: File not found'\n      error:\n        name: NotFoundError\n        message: File not found\n        stack: ...\n"})})]})}function u(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},675251:(e,t,s)=>{var n=s(667294),a=Symbol.for("react.element"),o=Symbol.for("react.fragment"),i=Object.prototype.hasOwnProperty,r=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function c(e,t,s){var n,o={},c=null,d=null;for(n in void 0!==s&&(c=""+s),void 0!==t.key&&(c=""+t.key),void 0!==t.ref&&(d=t.ref),t)i.call(t,n)&&!l.hasOwnProperty(n)&&(o[n]=t[n]);if(e&&e.defaultProps)for(n in t=e.defaultProps)void 0===o[n]&&(o[n]=t[n]);return{$$typeof:a,type:e,key:c,ref:d,props:o,_owner:r.current}}t.Fragment=o,t.jsx=c,t.jsxs=c},785893:(e,t,s)=>{e.exports=s(675251)},511151:(e,t,s)=>{s.d(t,{Z:()=>r,a:()=>i});var n=s(667294);const a={},o=n.createContext(a);function i(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);