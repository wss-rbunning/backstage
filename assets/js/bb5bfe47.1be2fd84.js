/*! For license information please see bb5bfe47.1be2fd84.js.LICENSE.txt */
"use strict";(self.webpackChunkbackstage_microsite=self.webpackChunkbackstage_microsite||[]).push([[251051],{676448:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>c,metadata:()=>r,toc:()=>l});var n=t(785893),a=t(511151);const c={id:"testing",title:"Testing Backend Plugins and Modules",sidebar_label:"Testing",description:"Learn how to test your backend plugins and modules"},i=void 0,r={id:"backend-system/building-plugins-and-modules/testing",title:"Testing Backend Plugins and Modules",description:"Learn how to test your backend plugins and modules",source:"@site/../docs/backend-system/building-plugins-and-modules/02-testing.md",sourceDirName:"backend-system/building-plugins-and-modules",slug:"/backend-system/building-plugins-and-modules/testing",permalink:"/docs/backend-system/building-plugins-and-modules/testing",draft:!1,unlisted:!1,editUrl:"https://github.com/backstage/backstage/edit/master/docs/../docs/backend-system/building-plugins-and-modules/02-testing.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"testing",title:"Testing Backend Plugins and Modules",sidebar_label:"Testing",description:"Learn how to test your backend plugins and modules"},sidebar:"docs",previous:{title:"Overview",permalink:"/docs/backend-system/building-plugins-and-modules/index"},next:{title:"Migration Guide",permalink:"/docs/backend-system/building-plugins-and-modules/migrating"}},o={},l=[{value:"Testing Backend Plugins and Modules",id:"testing-backend-plugins-and-modules",level:2},{value:"mock services",id:"mock-services",level:3},{value:"Testing Remote Service Interactions",id:"testing-remote-service-interactions",level:2},{value:"Testing Database Interactions",id:"testing-database-interactions",level:2},{value:"Testing Service Factories",id:"testing-service-factories",level:2}];function d(e){const s={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(s.p,{children:["Utilities for testing backend plugins and modules are available in\n",(0,n.jsx)(s.code,{children:"@backstage/backend-test-utils"}),". This section describes those facilities."]}),"\n",(0,n.jsx)(s.h2,{id:"testing-backend-plugins-and-modules",children:"Testing Backend Plugins and Modules"}),"\n",(0,n.jsxs)(s.p,{children:["To facilitate testing of backend plugins and modules, the\n",(0,n.jsx)(s.code,{children:"@backstage/backend-test-utils"})," package provides a ",(0,n.jsx)(s.code,{children:"startTestBackend"})," function\nwhich starts up an entire backend harness, complete with a number of mock\nservices. You can then provide overrides for services whose behavior you need to\nadjust for the test run. The function also accepts a number of ",(0,n.jsx)(s.em,{children:"features"})," (a\ncollective term for backend ",(0,n.jsx)(s.a,{href:"/docs/backend-system/architecture/plugins",children:"plugins"})," and\n",(0,n.jsx)(s.a,{href:"/docs/backend-system/architecture/modules",children:"modules"}),"), that are the subjects of the test."]}),"\n",(0,n.jsxs)(s.p,{children:["The function returns an HTTP server instance which can be used together with\ne.g. ",(0,n.jsx)(s.code,{children:"supertest"})," to easily test the actual REST service surfaces of plugins who\nregister routes with ",(0,n.jsx)(s.a,{href:"/docs/backend-system/core-services/index",children:"the HTTP router service API"}),"."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",children:"import { mockServices, startTestBackend } from '@backstage/backend-test-utils';\nimport request from 'supertest';\nimport { myPlugin } from './plugin.ts';\n\ndescribe('myPlugin', () => {\n  it('can serve values from config', async () => {\n    const fakeConfig = { myPlugin: { value: 7 } };\n    const mockLogger = mockServices.logger.mock();\n\n    const { server } = await startTestBackend({\n      features: [\n        myPlugin(),\n        mockServices.rootConfig.factory({ data: fakeConfig }),\n        mockLogger,\n      ],\n    });\n\n    const response = await request(server).get('/api/example/get-value');\n    expect(response.status).toBe(200);\n    expect(response.body).toEqual({ value: 7 });\n    expect(mockLogger.info).toHaveBeenCalledWith('Starting myPlugin');\n  });\n});\n"})}),"\n",(0,n.jsx)(s.p,{children:"This example shows how to access the mock service factories and\npass options to them, which will override the default mock services."}),"\n",(0,n.jsxs)(s.p,{children:["The returned server also has a ",(0,n.jsx)(s.code,{children:"port()"})," method which returns the dynamically\nbound listening port. You can use this to perform lower level network\ninteractions with the running test service."]}),"\n",(0,n.jsx)(s.h3,{id:"mock-services",children:"mock services"}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.a,{href:"https://backstage.io/docs/reference/backend-test-utils.mockservices",children:(0,n.jsx)(s.code,{children:"mockServices"})})," object from ",(0,n.jsx)(s.code,{children:"@backstage/backend-test-utils"})," provides service factory functions, and mocks for all core services that you can use to verify interactions between plugin and services."]}),"\n",(0,n.jsx)(s.p,{children:"All mock services provide a factory function that is sufficient for most tests. Here's an example:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",children:"const fakeConfig = { myPlugin: { value: 7 } };\nconst { server } = await startTestBackend({\n  features: [\n    // Will provide access to the default urlReaders automatically.\n    mockServices.urlReader.factory(),\n    // Some factories accept options, in this example we provide some fake config.\n    mockServices.rootConfig.factory({ data: fakeConfig }),\n  ],\n});\n"})}),"\n",(0,n.jsxs)(s.p,{children:["There might be situations where you want to mock a service implementation to verify interactions, in those cases you can use the ",(0,n.jsx)(s.code,{children:"mock"})," function to get a mock object that you can interact with. Here's an example:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",children:"import { mockServices, startTestBackend } from '@backstage/backend-test-utils';\nimport { myPlugin } from './plugin.ts';\n\ndescribe('myPlugin', () => {\n  it('should call use UrlReader', async () => {\n    const mockReader = mockServices.urlReader.mock();\n\n    await startTestBackend({\n      features: [myPlugin(), mockReader],\n    });\n\n    expect(mockReader.readUrl).toHaveBeenCalledWith('https://backstage.io');\n  });\n\n  it('should call use UrlReader again', async () => {\n    const partialImpl = jest.fn();\n    await startTestBackend({\n      features: [\n        myPlugin(),\n        // You could also supply partial implementations to the mock function.\n        mockServices.urlReader.mock({ readUrl: partialImpl }),\n      ],\n    });\n    expect(partialImpl).toHaveBeenCalledWith('https://backstage.io');\n  });\n});\n"})}),"\n",(0,n.jsx)(s.p,{children:"Available services:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://backstage.io/docs/reference/backend-test-utils.mockservices.auth/",children:(0,n.jsx)(s.code,{children:"auth"})})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://backstage.io/docs/reference/backend-test-utils.mockservices.cache/",children:(0,n.jsx)(s.code,{children:"cache"})})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://backstage.io/docs/reference/backend-test-utils.mockservices.database/",children:(0,n.jsx)(s.code,{children:"database"})})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://backstage.io/docs/reference/backend-test-utils.mockservices.discovery/",children:(0,n.jsx)(s.code,{children:"discovery"})})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://backstage.io/docs/reference/backend-test-utils.mockservices.events/",children:(0,n.jsx)(s.code,{children:"events"})})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://backstage.io/docs/reference/backend-test-utils.mockservices.httpAuth/",children:(0,n.jsx)(s.code,{children:"httpAuth"})})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://backstage.io/docs/reference/backend-test-utils.mockservices.httpRouter/",children:(0,n.jsx)(s.code,{children:"httpRouter"})})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://backstage.io/docs/reference/backend-test-utils.mockservices.lifecycle/",children:(0,n.jsx)(s.code,{children:"lifecycle"})})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://backstage.io/docs/reference/backend-test-utils.mockservices.logger/",children:(0,n.jsx)(s.code,{children:"logger"})})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://backstage.io/docs/reference/backend-test-utils.mockservices.permissions/",children:(0,n.jsx)(s.code,{children:"permissions"})})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://backstage.io/docs/reference/backend-test-utils.mockservices.rootConfig/",children:(0,n.jsx)(s.code,{children:"rootConfig"})})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://backstage.io/docs/reference/backend-test-utils.mockservices.rootHealth/",children:(0,n.jsx)(s.code,{children:"rootHealth"})})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://backstage.io/docs/reference/backend-test-utils.mockservices.rootHttpRouter/",children:(0,n.jsx)(s.code,{children:"rootHttpRouter"})})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://backstage.io/docs/reference/backend-test-utils.mockservices.rootLifecycle/",children:(0,n.jsx)(s.code,{children:"rootLifecycle"})})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://backstage.io/docs/reference/backend-test-utils.mockservices.rootLogger/",children:(0,n.jsx)(s.code,{children:"rootLogger"})})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://backstage.io/docs/reference/backend-test-utils.mockservices.scheduler/",children:(0,n.jsx)(s.code,{children:"scheduler"})})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://backstage.io/docs/reference/backend-test-utils.mockservices.urlReader/",children:(0,n.jsx)(s.code,{children:"urlReader"})})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://backstage.io/docs/reference/backend-test-utils.mockservices.userInfo/",children:(0,n.jsx)(s.code,{children:"userInfo"})})}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"testing-remote-service-interactions",children:"Testing Remote Service Interactions"}),"\n",(0,n.jsxs)(s.p,{children:["If your backend plugin or service interacts with external services using HTTP\ncalls, we recommend leveraging the ",(0,n.jsx)(s.code,{children:"msw"})," package to intercept actual outgoing\nrequests and return mock responses. This lets you stub out remote services\nrather than the local clients, leading to more thorough and robust tests. You\ncan read more about how it works ",(0,n.jsx)(s.a,{href:"https://mswjs.io/",children:"in their documentation"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"@backstage/backend-test-utils"})," package exports a ",(0,n.jsx)(s.code,{children:"registerMswTestHooks"}),"\nfunction which ensures that the correct ",(0,n.jsx)(s.code,{children:"jest"})," lifecycle hooks are invoked to\nset up and tear down your ",(0,n.jsx)(s.code,{children:"msw"})," instance, and enables the option that completely\nrejects requests that don't match one of your mock rules. This ensures that your\ntests cannot accidentally leak traffic into production from tests."]}),"\n",(0,n.jsx)(s.p,{children:"Example:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",children:"import { registerMswTestHooks } from '@backstage/backend-test-utils';\nimport { rest } from 'msw';\nimport { setupServer } from 'msw/node';\n\ndescribe('read from remote', () => {\n  const worker = setupServer();\n  registerMswTestHooks(worker);\n\n  it('should auth and read successfully', async () => {\n    expect.assertions(1);\n\n    worker.use(\n      rest.get('https://remote-server.com/api/v3/foo', (req, res, ctx) => {\n        expect(req.headers.get('authorization')).toBe('Bearer fake');\n        return res(\n          ctx.status(200),\n          ctx.set('Content-Type', 'application/json'),\n          ctx.body(JSON.stringify({ value: 7 })),\n        );\n      }),\n    );\n\n    // exercise your plugin or service as usual, with real clients\n  });\n});\n"})}),"\n",(0,n.jsx)(s.h2,{id:"testing-database-interactions",children:"Testing Database Interactions"}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"@backstage/backend-test-utils"})," package includes facilities for testing your\nplugins' interactions with databases, including spinning up ",(0,n.jsx)(s.code,{children:"testcontainers"}),"\npowered Docker images with real database engines to connect to."]}),"\n",(0,n.jsx)(s.p,{children:"The base setup for such a test could look as follows:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",children:"// MyDatabaseClass.test.ts\nimport { TestDatabaseId, TestDatabases } from '@backstage/backend-test-utils';\nimport { MyDatabaseClass, type FooTableRow } from './MyDatabaseClass';\n\ndescribe('MyDatabaseClass', () => {\n  // Change this to the set of constants that you actually actively intend to\n  // support. This create call must be made inside a describe block. Make sure\n  // to create only one TestDatabases instance per file, since spinning up\n  // \"physical\" databases to test against is much costlier than creating the\n  // \"logical\" databases within them that the individual tests use.\n  const databases = TestDatabases.create({\n    ids: ['POSTGRES_16', 'POSTGRES_12', 'SQLITE_3', 'MYSQL_8'],\n  });\n\n  // Just an example of how to conveniently bundle up the setup code\n  async function createSubject(databaseId: TestDatabaseId) {\n    const knex = await databases.init(databaseId);\n    const subject = new MyDatabaseClass({ database: knex });\n    await subject.runMigrations();\n    return { knex, subject };\n  }\n\n  describe('foo', () => {\n    // Easily run the exact same test onto all supported databases\n    it.each(databases.eachSupportedId())(\n      'should run foo on %p',\n      async databaseId => {\n        const { knex, subject } = await createSubject(databaseId);\n        // raw knex is available for underlying manipulation\n        await knex<FooTableRow>('foo').insert({ value: 2 });\n        // drive your system under test as usual\n        await expect(subject.foos()).resolves.toEqual([{ value: 2 }]);\n      },\n    );\n  });\n});\n"})}),"\n",(0,n.jsxs)(s.p,{children:["If you want to pass the test database instance into backend plugins or services,\nyou can supply it in the form of a mock instance of ",(0,n.jsx)(s.code,{children:"coreServices.database"})," to\nyour test database."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",children:"const { knex, subject } = await createSubject(databaseId);\nconst { server } = await startTestBackend({\n  features: [\n    myPlugin(),\n    mockServices.database.mock({ getClient: async () => knex }),\n  ],\n});\n"})}),"\n",(0,n.jsxs)(s.p,{children:["When running locally, the tests only run against SQLite for the sake of speed.\nWhen the ",(0,n.jsx)(s.code,{children:"CI"})," environment variable is set, all given database engines are used."]}),"\n",(0,n.jsxs)(s.p,{children:["If you do not want or are unable to use docker based database engines, e.g. if\nyour CI environment is able to supply databases natively, the ",(0,n.jsx)(s.code,{children:"TestDatabases"}),"\nsupport custom connection strings through the use of environment variables that\nit'll take into account when present."]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.code,{children:"BACKSTAGE_TEST_DATABASE_POSTGRES13_CONNECTION_STRING"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.code,{children:"BACKSTAGE_TEST_DATABASE_POSTGRES9_CONNECTION_STRING"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.code,{children:"BACKSTAGE_TEST_DATABASE_MYSQL8_CONNECTION_STRING"})}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"testing-service-factories",children:"Testing Service Factories"}),"\n",(0,n.jsxs)(s.p,{children:["To facilitate testing of service factories, the ",(0,n.jsx)(s.code,{children:"@backstage/backend-test-utils"}),"\npackage provides a ",(0,n.jsx)(s.code,{children:"ServiceFactoryTester"})," helper that lets you instantiate services\nin a controlled context."]}),"\n",(0,n.jsxs)(s.p,{children:["The following example shows how to test a service factory where we also provide\na mocked implementation of the ",(0,n.jsx)(s.code,{children:"rootConfig"})," service."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",children:"import {\n  mockServices,\n  ServiceFactoryTester,\n} from '@backstage/backend-test-utils';\nimport { myServiceFactory } from './myServiceFactory.ts';\n\ndescribe('myServiceFactory', () => {\n  it('should provide value', async () => {\n    const fakeConfig = { myConfiguredValue: 7 };\n\n    const tester = ServiceFactoryTester.from(myServiceFactory, {\n      dependencies: [mockServices.rootConfig.factory({ data: fakeConfig })],\n    });\n\n    const myService = await tester.get('test-plugin');\n\n    expect(myService.getValue()).toBe(7);\n  });\n});\n"})}),"\n",(0,n.jsx)(s.p,{children:"The service factory tester also provides mocked implementations of the majority\nof all core services by default."})]})}function u(e={}){const{wrapper:s}={...(0,a.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},675251:(e,s,t)=>{var n=t(667294),a=Symbol.for("react.element"),c=Symbol.for("react.fragment"),i=Object.prototype.hasOwnProperty,r=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,o={key:!0,ref:!0,__self:!0,__source:!0};function l(e,s,t){var n,c={},l=null,d=null;for(n in void 0!==t&&(l=""+t),void 0!==s.key&&(l=""+s.key),void 0!==s.ref&&(d=s.ref),s)i.call(s,n)&&!o.hasOwnProperty(n)&&(c[n]=s[n]);if(e&&e.defaultProps)for(n in s=e.defaultProps)void 0===c[n]&&(c[n]=s[n]);return{$$typeof:a,type:e,key:l,ref:d,props:c,_owner:r.current}}s.Fragment=c,s.jsx=l,s.jsxs=l},785893:(e,s,t)=>{e.exports=t(675251)},511151:(e,s,t)=>{t.d(s,{Z:()=>r,a:()=>i});var n=t(667294);const a={},c=n.createContext(a);function i(e){const s=n.useContext(c);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(c.Provider,{value:s},e.children)}}}]);