/*! For license information please see 42c15e39.f843d098.js.LICENSE.txt */
"use strict";(self.webpackChunkbackstage_microsite=self.webpackChunkbackstage_microsite||[]).push([[870624],{547691:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var t=i(785893),c=i(511151);const s={id:"adrs-adr011",title:"ADR011: Plugin Package Structure",description:"Architecture Decision Record (ADR) for Plugin Package Structure"},o=void 0,a={id:"architecture-decisions/adrs-adr011",title:"ADR011: Plugin Package Structure",description:"Architecture Decision Record (ADR) for Plugin Package Structure",source:"@site/../docs/architecture-decisions/adr011-plugin-package-structure.md",sourceDirName:"architecture-decisions",slug:"/architecture-decisions/adrs-adr011",permalink:"/docs/architecture-decisions/adrs-adr011",draft:!1,unlisted:!1,editUrl:"https://github.com/backstage/backstage/edit/master/docs/../docs/architecture-decisions/adr011-plugin-package-structure.md",tags:[],version:"current",frontMatter:{id:"adrs-adr011",title:"ADR011: Plugin Package Structure",description:"Architecture Decision Record (ADR) for Plugin Package Structure"},sidebar:"docs",previous:{title:"ADR010: Use the Luxon Date Library",permalink:"/docs/architecture-decisions/adrs-adr010"},next:{title:"ADR012: Use Luxon.toLocaleString and date/time presets",permalink:"/docs/architecture-decisions/adrs-adr012"}},r={},d=[{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Consequences",id:"consequences",level:2}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",li:"li",p:"p",ul:"ul",...(0,c.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,t.jsxs)(n.p,{children:["A core feature of Backstage is the extensibility via plugins. Even most of the core features\nare implemented as plugins. A plugin consists of one or multiple packages in the\n",(0,t.jsx)(n.code,{children:"plugins/"})," directory. Up till now, we have a simple conventions for naming\nplugin packages: Plugins are named ",(0,t.jsx)(n.code,{children:"x"}),", with the option of having a related\nbackend plugin called ",(0,t.jsx)(n.code,{children:"x-backend"})," (where ",(0,t.jsx)(n.code,{children:"x"})," is the plugin name, like ",(0,t.jsx)(n.code,{children:"catalog"}),"\nor ",(0,t.jsx)(n.code,{children:"techdocs"}),"). There is a need for sharing code between the frontend and\nbackend of a plugin, between backend plugins, or components and hooks between\ndifferent frontend plugins\n(",(0,t.jsx)(n.a,{href:"https://github.com/backstage/backstage/issues/3655#issuecomment-758166746",children:"some examples"}),").\nThis results in emerging plugin packages with shared code, like\n",(0,t.jsx)(n.code,{children:"packages/catalog-client"})," or ",(0,t.jsx)(n.code,{children:"packages/techdocs-common"}),"."]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["There is a common phrase in software development:\n",(0,t.jsx)(n.a,{href:"https://martinfowler.com/bliki/TwoHardThings.html",children:"Naming things is hard"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"To keep the contributed plugins consistent, this Architecture Decision Record\nprovides rules for naming plugin packages."}),"\n",(0,t.jsx)(n.h2,{id:"decision",children:"Decision"}),"\n",(0,t.jsxs)(n.p,{children:["We will place all plugin related code in the ",(0,t.jsx)(n.code,{children:"plugins/"})," directory. The\n",(0,t.jsx)(n.code,{children:"packages/"})," directory is reserved for core package of Backstage."]}),"\n",(0,t.jsxs)(n.p,{children:["We follow this structure for plugin packages (where ",(0,t.jsx)(n.code,{children:"x"})," is the plugin name, for\nexample ",(0,t.jsx)(n.code,{children:"catalog"})," or ",(0,t.jsx)(n.code,{children:"techdocs"}),"):"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"x"}),": Contains the main frontend code of the plugin."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"x-module-<name>"}),": Contains optional modules related to the frontend plugin\npackage."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"x-backend"}),": Contains the main backend code of the plugin."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"x-backend-module-<name>"}),": Contains optional modules related to the backend\nplugin package."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"x-react"}),": Contains shared widgets, hooks and similar that both the plugin\nitself (",(0,t.jsx)(n.code,{children:"x"}),") and third-party frontend plugins can depend on."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"x-node"}),": Contains utilities for backends that both the plugin backend itself\n(",(0,t.jsx)(n.code,{children:"x-backend"}),") and third-party backend plugins can depend on."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"x-common"}),": An isomorphic package with platform agnostic models, clients, and\nutilities that all packages above or any third-party plugin package can depend\non."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["We prefix the package names with ",(0,t.jsx)(n.code,{children:"@backstage/plugin-"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["This structure is based on a\n",(0,t.jsx)(n.a,{href:"https://github.com/backstage/backstage/issues/3655#issuecomment-758166746",children:"suggestion in issue #3655"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"consequences",children:"Consequences"}),"\n",(0,t.jsxs)(n.p,{children:["We will actively migrate existing packages that are part of a plugin to the\n",(0,t.jsx)(n.code,{children:"plugins/"})," folder. This affects packages like:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"packages/techdocs-common"})," which should be moved to ",(0,t.jsx)(n.code,{children:"plugins/techdocs-node"}),"\nand named ",(0,t.jsx)(n.code,{children:"@backstage/plugin-techdocs-node"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"packages/catalog-client"})," which will be part of a future\n",(0,t.jsx)(n.code,{children:"plugins/catalog-common"})," and named ",(0,t.jsx)(n.code,{children:"@backstage/plugin-catalog-common"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["While the new location of ",(0,t.jsx)(n.code,{children:"packages/catalog-model"})," should be\n",(0,t.jsx)(n.code,{children:"plugins/catalog-common"})," we might want to do an exception here, as it's a very\ncentral package."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["We will actively migrate optional features of backend plugins into separate\n",(0,t.jsx)(n.code,{children:"x-backend-module-<name>"})," packages, for example the more specialized processors\nin the catalog backend."]}),"\n",(0,t.jsx)(n.p,{children:"The limited set of rules might not be sufficient in the future. If additional\npackages are required, we will revisit this decision and extend the pattern."}),"\n",(0,t.jsx)(n.p,{children:"If possible, we will add tools, such as lint rules, to help enforce the package\nnames and dependencies between them or CLI commands to generate these packages."}),"\n",(0,t.jsxs)(n.p,{children:["The distinction between core packages and plugins helps us to setup\n",(0,t.jsx)(n.a,{href:"https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/about-code-owners",children:"CODEOWNERS"}),"\nin the repository. We can set the code owners for the ",(0,t.jsx)(n.code,{children:"packages/"})," folder to the\ncore team and create additional rules (like ",(0,t.jsx)(n.code,{children:"plugins/x*"}),") for plugin\nmaintainers."]})]})}function h(e={}){const{wrapper:n}={...(0,c.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},675251:(e,n,i)=>{var t=i(667294),c=Symbol.for("react.element"),s=Symbol.for("react.fragment"),o=Object.prototype.hasOwnProperty,a=t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,r={key:!0,ref:!0,__self:!0,__source:!0};function d(e,n,i){var t,s={},d=null,l=null;for(t in void 0!==i&&(d=""+i),void 0!==n.key&&(d=""+n.key),void 0!==n.ref&&(l=n.ref),n)o.call(n,t)&&!r.hasOwnProperty(t)&&(s[t]=n[t]);if(e&&e.defaultProps)for(t in n=e.defaultProps)void 0===s[t]&&(s[t]=n[t]);return{$$typeof:c,type:e,key:d,ref:l,props:s,_owner:a.current}}n.Fragment=s,n.jsx=d,n.jsxs=d},785893:(e,n,i)=>{e.exports=i(675251)},511151:(e,n,i)=>{i.d(n,{Z:()=>a,a:()=>o});var t=i(667294);const c={},s=t.createContext(c);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);