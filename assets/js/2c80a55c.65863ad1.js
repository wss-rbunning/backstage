/*! For license information please see 2c80a55c.65863ad1.js.LICENSE.txt */
"use strict";(self.webpackChunkbackstage_microsite=self.webpackChunkbackstage_microsite||[]).push([[979280],{182069:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var o=n(785893),c=n(511151);const i={id:"writing-tests-for-actions",title:"Writing Tests For Actions",description:"How to write tests for actions"},r="Unit Testing Custom Actions",s={id:"features/software-templates/writing-tests-for-actions",title:"Writing Tests For Actions",description:"How to write tests for actions",source:"@site/../docs/features/software-templates/writing-tests-for-actions.md",sourceDirName:"features/software-templates",slug:"/features/software-templates/writing-tests-for-actions",permalink:"/docs/features/software-templates/writing-tests-for-actions",draft:!1,unlisted:!1,editUrl:"https://github.com/backstage/backstage/edit/master/docs/../docs/features/software-templates/writing-tests-for-actions.md",tags:[],version:"current",frontMatter:{id:"writing-tests-for-actions",title:"Writing Tests For Actions",description:"How to write tests for actions"},sidebar:"docs",previous:{title:"Writing Custom Actions",permalink:"/docs/features/software-templates/writing-custom-actions"},next:{title:"Writing Custom Field Extensions",permalink:"/docs/features/software-templates/writing-custom-field-extensions"}},a={},l=[{value:"Mocking the Context",id:"mocking-the-context",level:2},{value:"Mocking a Workspace within the Context object",id:"mocking-a-workspace-within-the-context-object",level:3},{value:"Mocking a Config Core Service",id:"mocking-a-config-core-service",level:2},{value:"Mocking a Cache Core Service",id:"mocking-a-cache-core-service",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,c.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"unit-testing-custom-actions",children:"Unit Testing Custom Actions"})}),"\n",(0,o.jsxs)(t.p,{children:["Unit tests help prevent regressions in custom action functionality. The ",(0,o.jsx)(t.code,{children:"createTemplateAction"})," function that is the core of a custom action can be difficult to mock. There are helper methods that can assist."]}),"\n",(0,o.jsx)(t.h2,{id:"mocking-the-context",children:"Mocking the Context"}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"handler"})," property of the ",(0,o.jsx)(t.code,{children:"createTemplateAction"})," input object expects a context. You can create a mock context using the code below:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"import { createMockActionContext } from '@backstage/plugin-scaffolder-node-test-utils';\n\nconst mockContext = createMockActionContext({\n  input: { repoUrl: 'dev.azure.com?repo=repo&owner=owner&organization=org' },\n});\n\nawait action.handler(mockContext);\n\nexpect(mockContext.output).toHaveBeenCalledWith(\n  'remoteUrl',\n  'https://dev.azure.com/organization/project/_git/repo',\n);\n"})}),"\n",(0,o.jsx)(t.h3,{id:"mocking-a-workspace-within-the-context-object",children:"Mocking a Workspace within the Context object"}),"\n",(0,o.jsxs)(t.p,{children:["One thing to be aware about: if you would like to call ",(0,o.jsx)(t.code,{children:"createMockActionContext"})," inside ",(0,o.jsx)(t.code,{children:"it"}),",\nyou have to provide a ",(0,o.jsx)(t.code,{children:"workspacePath"}),". By default, ",(0,o.jsx)(t.code,{children:"createMockActionContext"})," uses\n",(0,o.jsx)(t.code,{children:"import { createMockDirectory } from '@backstage/backend-test-utils';"})," to create it for you. You can use the code below to customize the ",(0,o.jsx)(t.code,{children:"workspacePath"})," without using the default workspace of the ",(0,o.jsx)(t.code,{children:"createMockActionContext"})," function."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"describe('github:autolinks:create', async () => {\n  const workspacePath = createMockDirectory().resolve('workspace');\n  // ...\n\n  it('should call the githubApis for creating alphanumeric autolink reference', async () => {\n    // ...\n    await action.handler(\n      createMockActionContext({\n        input: {\n          repoUrl: 'github.com?repo=repo&owner=owner',\n          keyPrefix: 'TICKET-',\n          urlTemplate: 'https://example.com/TICKET?query=<num>',\n        },\n        workspacePath,\n      }),\n    );\n    //...\n  });\n});\n"})}),"\n",(0,o.jsx)(t.h2,{id:"mocking-a-config-core-service",children:"Mocking a Config Core Service"}),"\n",(0,o.jsxs)(t.p,{children:["If your custom Action requires the Config Core Service within execution of the ",(0,o.jsx)(t.code,{children:"handler(ctx)"})," such as the custom action below, mocking the context object can be done by building a ",(0,o.jsx)(t.code,{children:"mockContext"})," with the ",(0,o.jsx)(t.code,{children:"ConfigReader"})," function within the ",(0,o.jsx)(t.code,{children:"@backstage/config"})," package."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"// custom-action.ts\nimport { Config } from '@backstage/config';\n\nexport const customActionRequiringConfigCoreService = (config: Config) => {\n  const fieldRequiringValueFromConfig = config.getString('app.service.url');\n  return createTemplateAction({\n    ...\n    async handler(ctx) {\n      // Some code requiring the config const\n      ctx.logger.info(fieldRequiringValueFromConfig);\n    }\n  })\n}\n"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"// custom-action.test.ts\nimport { ConfigReader } from '@backstage/config';\nimport { customActionRequiringConfigCoreService } from './custom-action.ts';\n...\nconst mockConfig = new ConfigReader({\n  app: {\n    service: {\n      url: 'https://api.service.io/graphql',\n      apiKeyId: '123',\n      apiKeySecret: '123abc',\n    },\n  },\n});\n...\nconst action = customActionRequiringConfigCoreService(mockConfig);\nawait action.handler({\n  ...mockContext\n})\n"})}),"\n",(0,o.jsx)(t.h2,{id:"mocking-a-cache-core-service",children:"Mocking a Cache Core Service"}),"\n",(0,o.jsxs)(t.p,{children:["Similar to the ",(0,o.jsx)(t.code,{children:"Mocking a Config Core Service"})," section above, if your custom action expects a Cache Core Service Object as part of the function input, you can mock it out with the following:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"import { CacheService } from '@backstage/backend-plugin-api';\n\nconst mockCacheServiceMethods = {\n  get: jest.fn(),\n  set: jest.fn(),\n  delete: jest.fn(),\n};\n\nconst mockCacheService = mockCacheServiceMethods as unknown as CacheService;\n\nconst action = customActionRequiringCacheCoreService(mockCacheService);\n...\n"})})]})}function h(e={}){const{wrapper:t}={...(0,c.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},675251:(e,t,n)=>{var o=n(667294),c=Symbol.for("react.element"),i=Symbol.for("react.fragment"),r=Object.prototype.hasOwnProperty,s=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,a={key:!0,ref:!0,__self:!0,__source:!0};function l(e,t,n){var o,i={},l=null,d=null;for(o in void 0!==n&&(l=""+n),void 0!==t.key&&(l=""+t.key),void 0!==t.ref&&(d=t.ref),t)r.call(t,o)&&!a.hasOwnProperty(o)&&(i[o]=t[o]);if(e&&e.defaultProps)for(o in t=e.defaultProps)void 0===i[o]&&(i[o]=t[o]);return{$$typeof:c,type:e,key:l,ref:d,props:i,_owner:s.current}}t.Fragment=i,t.jsx=l,t.jsxs=l},785893:(e,t,n)=>{e.exports=n(675251)},511151:(e,t,n)=>{n.d(t,{Z:()=>s,a:()=>r});var o=n(667294);const c={},i=o.createContext(c);function r(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:r(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);