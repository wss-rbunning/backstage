/*! For license information please see 3984ad7a.7ed65d32.js.LICENSE.txt */
"use strict";(self.webpackChunkbackstage_microsite=self.webpackChunkbackstage_microsite||[]).push([[287471],{117264:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var t=i(785893),s=i(511151);const r={id:"using-backstage-proxy-within-plugin",title:"Using the Backstage Proxy from Within a Plugin",description:"Guide on how to create a set of API bindings that interface with a backend via the backstage proxy"},o="Setting up the backstage proxy",a={id:"tutorials/using-backstage-proxy-within-plugin",title:"Using the Backstage Proxy from Within a Plugin",description:"Guide on how to create a set of API bindings that interface with a backend via the backstage proxy",source:"@site/../docs/tutorials/using-backstage-proxy-within-plugin.md",sourceDirName:"tutorials",slug:"/tutorials/using-backstage-proxy-within-plugin",permalink:"/docs/tutorials/using-backstage-proxy-within-plugin",draft:!1,unlisted:!1,editUrl:"https://github.com/backstage/backstage/edit/master/docs/../docs/tutorials/using-backstage-proxy-within-plugin.md",tags:[],version:"current",frontMatter:{id:"using-backstage-proxy-within-plugin",title:"Using the Backstage Proxy from Within a Plugin",description:"Guide on how to create a set of API bindings that interface with a backend via the backstage proxy"},sidebar:"docs",previous:{title:"Switching Backstage from SQLite to PostgreSQL",permalink:"/docs/tutorials/switching-sqlite-postgres"},next:{title:"Migration to Yarn 3",permalink:"/docs/tutorials/yarn-migration"}},c={},l=[{value:"Defining the API client interface",id:"defining-the-api-client-interface",level:2},{value:"Creating the API client",id:"creating-the-api-client",level:2},{value:"Bundling your ApiRef with your plugin",id:"bundling-your-apiref-with-your-plugin",level:2},{value:"Using the API in your components",id:"using-the-api-in-your-components",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"This guide walks you through setting up a simple proxy to an existing API that\nis deployed externally to backstage and sending requests to that API from within\na backstage frontend plugin."}),"\n",(0,t.jsxs)(n.p,{children:["If your plugin requires access to an API, backstage offers\n",(0,t.jsx)(n.a,{href:"/docs/plugins/call-existing-api",children:"3 options"}),":"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["you can\n",(0,t.jsx)(n.a,{href:"/docs/plugins/call-existing-api#issuing-requests-directly",children:"access the API directly"}),","]}),"\n",(0,t.jsxs)(n.li,{children:["you can create a ",(0,t.jsx)(n.a,{href:"/docs/plugins/backend-plugin",children:"backend plugin"})," if you are\nimplementing the API alongside your frontend plugin"]}),"\n",(0,t.jsx)(n.li,{children:"you can configure backstage to proxy to an already existing API."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Table of Contents"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#setting-up-the-backstage-proxy",children:"Setting up the backstage proxy"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#calling-an-api-using-the-backstage-proxy",children:"Calling an API using the backstage proxy"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#defining-the-api-client-interface",children:"Defining the API client interface"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#creating-the-api-client",children:"Creating the API client"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#bundling-your-apiref-with-your-plugin",children:"Bundling your ApiRef with your plugin"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#using-your-plugin-in-your-components",children:"Using the API in your components"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"setting-up-the-backstage-proxy",children:"Setting up the backstage proxy"})}),"\n",(0,t.jsxs)(n.p,{children:["Let's say your plugin's API is hosted at ",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.a,{href:"https://api.myawesomeservice.com/v1",children:"https://api.myawesomeservice.com/v1"})}),",\nand you want to be able to access it within backstage at\n",(0,t.jsx)(n.code,{children:"/api/proxy/<your-proxy-uri>"}),", and add a default header called\n",(0,t.jsx)(n.code,{children:"X-Custom-Source"}),". You will need to add the following to ",(0,t.jsx)(n.code,{children:"app-config.yaml"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"proxy:\n  '/<your-proxy-uri>':\n    target: https://api.myawesomeservice.com/v1\n    headers:\n      X-Custom-Source: backstage\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can find more details about the proxy config options in the\n",(0,t.jsx)(n.a,{href:"/docs/plugins/proxying",children:"proxying section"}),"."]}),"\n",(0,t.jsx)(n.h1,{id:"calling-an-api-using-the-backstage-proxy",children:"Calling an API using the backstage proxy"}),"\n",(0,t.jsxs)(n.p,{children:["If you followed the previous steps, you should now be able to access your API by\ncalling ",(0,t.jsx)(n.code,{children:"${backend-url}/api/proxy/<your-proxy-uri>"}),". The reason why\n",(0,t.jsx)(n.code,{children:"backend-url"})," is referenced is because the backstage backend creates and runs\nthe proxy. Backstage is structured in such a way that you could run the\nbackstage frontend independently of the backend. So when calling your API you\nneed to prepend the backend URL to your http call."]}),"\n",(0,t.jsxs)(n.p,{children:["The recommended pattern for calling out to services is to wrap your calls in a\n",(0,t.jsx)(n.a,{href:"/docs/api/utility-apis",children:"Utility API"}),". This section describes the steps to wrap\nyour API client in a Utility API, which are:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["use ",(0,t.jsx)(n.a,{href:"/docs/reference/core-plugin-api.createapiref",children:(0,t.jsx)(n.code,{children:"createApiRef"})})," to create a\nnew ",(0,t.jsx)(n.a,{href:"/docs/reference/core-plugin-api.apiref",children:(0,t.jsx)(n.code,{children:"ApiRef"})})]}),"\n",(0,t.jsxs)(n.li,{children:["register an ",(0,t.jsx)(n.a,{href:"/docs/reference/core-plugin-api.apifactory",children:(0,t.jsx)(n.code,{children:"ApiFactory"})})," with\nyour plugin using\n",(0,t.jsx)(n.a,{href:"/docs/reference/core-plugin-api.createapifactory",children:(0,t.jsx)(n.code,{children:"createApiFactory"})}),". This\nwill wrap your API implementation, associate your ",(0,t.jsx)(n.code,{children:"ApiRef"})," with your\nimplementation and tell backstage how to instantiate it"]}),"\n",(0,t.jsxs)(n.li,{children:["finally, you can use your API in your components by calling\n",(0,t.jsx)(n.a,{href:"/docs/reference/core-plugin-api.useapi",children:(0,t.jsx)(n.code,{children:"useApi"})})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"defining-the-api-client-interface",children:"Defining the API client interface"}),"\n",(0,t.jsxs)(n.p,{children:["Continuing from the previous example, let's assume that\n",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.a,{href:"https://api.myawesomeservice.com/v1",children:"https://api.myawesomeservice.com/v1"})})," has the following endpoints:"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{style:{textAlign:"left"},children:"Method"}),(0,t.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{style:{textAlign:"left"},children:(0,t.jsx)(n.code,{children:"GET /users"})}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Returns a list of users"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{style:{textAlign:"left"},children:(0,t.jsx)(n.code,{children:"GET /users/{userId}"})}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Returns a single user"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{style:{textAlign:"left"},children:(0,t.jsx)(n.code,{children:"DELETE /users/{userId}"})}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Deletes a user"})]})]})]}),"\n",(0,t.jsxs)(n.p,{children:["Here is an example definition for this API following backstage's ",(0,t.jsx)(n.code,{children:"apiRef"})," style:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"/* src/api.ts */\nimport { createApiRef } from '@backstage/core-plugin-api';\n\nexport interface User {\n  name: string;\n  email: string;\n}\n\nexport interface MyAwesomeApi {\n  url: string;\n  listUsers: () => Promise<List<User>>;\n  getUser: (userId: string) => Promise<User>;\n  deleteUser: (userId: string) => Promise<boolean>;\n}\n\nexport const myAwesomeApiRef = createApiRef<MyAwesomeApi>({\n  id: 'plugin.my-awesome-api.service',\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"creating-the-api-client",children:"Creating the API client"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"myAwesomeApiRef"})," is what you will use within backstage to reference the API\nclient in your plugin. The API ref itself is a global singleton object that\nallows you to reference your instantiated API. The actual implementation would\nlook something like this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"/* src/api.ts */\n\n/* ... */\n\nimport { DiscoveryApi } from '@backstage/core-plugin-api';\n\nexport class MyAwesomeApiClient implements MyAwesomeApi {\n  discoveryApi: DiscoveryApi;\n\n  constructor({discoveryApi}: {discoveryApi: DiscoveryApi}) {\n    this.discoveryApi = discoveryApi;\n  }\n\n  private async fetch<T = any>(input: string, init?: RequestInit): Promise<T> {\n    // As configured previously for the backend proxy\n    const proxyUri = `${await this.discoveryApi.getBaseUrl('proxy')}/<your-proxy-uri>`;\n\n    const resp = await fetch(`${proxyUri}${input}`, init);\n    if (!resp.ok) throw new Error(resp);\n    return await resp.json();\n  }\n\n  async listUsers(): Promise<List<User>> {\n    return await this.fetch<List<User>>('/users');\n  }\n\n  async getUser(userId: string): Promise<User> {\n    return await this.fetch<User>(`/users/${userId}`);\n  }\n\n  async deleteUser(userId: string): Promise<boolean> {\n    return await this.fetch<boolean>(\n      `/users/${userId}`,\n      { method: 'DELETE' }\n    );\n  }\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["For more information on the DiscoveryApi check out the\n",(0,t.jsx)(n.a,{href:"/docs/reference/core-plugin-api.discoveryapi",children:"docs"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"bundling-your-apiref-with-your-plugin",children:"Bundling your ApiRef with your plugin"}),"\n",(0,t.jsxs)(n.p,{children:["The final piece in the puzzle is bundling the ",(0,t.jsx)(n.code,{children:"myAwesomeApiRef"})," with a factory\nfor ",(0,t.jsx)(n.code,{children:"MyAwesomeApiClient"})," objects. This is usually done in the ",(0,t.jsx)(n.code,{children:"plugin.ts"})," file\ninside the plugin's ",(0,t.jsx)(n.code,{children:"src"})," directory. This is an example of what it'd look like,\nassuming you added the previous code in a file called ",(0,t.jsx)(n.code,{children:"api.ts"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"/* src/plugin.ts */\nimport { myAwesomeApiRef, MyAwesomeApiClient } from './api';\nimport {\n  createPlugin,\n  createRouteRef,\n  createApiFactory,\n  createRoutableExtension,\n  createComponentExtension,\n  discoveryApiRef,\n} from '@backstage/core-plugin-api';\n\n//...\n\nexport const myCustomPlugin = createPlugin({\n  id: '<your-plugin-name>',\n\n  // Configure a factory for myAwesomeApiRef\n  apis: [\n    createApiFactory({\n      api: myAwesomeApiRef,\n      deps: { discoveryApi: discoveryApiRef },\n      factory: ({ discoveryApi }) => new MyAwesomeApiClient({ discoveryApi }),\n    }),\n  ],\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"using-the-api-in-your-components",children:"Using the API in your components"}),"\n",(0,t.jsxs)(n.p,{children:["Now you should be able to access your API using the backstage hook\n",(0,t.jsx)(n.a,{href:"/docs/reference/core-plugin-api.useapi",children:(0,t.jsx)(n.code,{children:"useApi"})})," from within your plugin code."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"/* plugins/my-awesome-plugin/src/components/AwesomeUsersTable.tsx */\nimport { useApi } from '@backstage/core-plugin-api';\nimport { myAwesomeApiRef } from '../../api';\n\nexport const AwesomeUsersTable = () => {\n  const apiClient = useApi(myAwesomeApiRef);\n\n  apiClient.listUsers()\n    .then(\n      ...\n    )\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},675251:(e,n,i)=>{var t=i(667294),s=Symbol.for("react.element"),r=Symbol.for("react.fragment"),o=Object.prototype.hasOwnProperty,a=t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,c={key:!0,ref:!0,__self:!0,__source:!0};function l(e,n,i){var t,r={},l=null,d=null;for(t in void 0!==i&&(l=""+i),void 0!==n.key&&(l=""+n.key),void 0!==n.ref&&(d=n.ref),n)o.call(n,t)&&!c.hasOwnProperty(t)&&(r[t]=n[t]);if(e&&e.defaultProps)for(t in n=e.defaultProps)void 0===r[t]&&(r[t]=n[t]);return{$$typeof:s,type:e,key:l,ref:d,props:r,_owner:a.current}}n.Fragment=r,n.jsx=l,n.jsxs=l},785893:(e,n,i)=>{e.exports=i(675251)},511151:(e,n,i)=>{i.d(n,{Z:()=>a,a:()=>o});var t=i(667294);const s={},r=t.createContext(s);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);